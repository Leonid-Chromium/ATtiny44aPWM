
PWM44A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000562  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b5  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000267  00000000  00000000  00000b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001102  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	2b c0       	rjmp	.+86     	; 0x88 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:


int main(void)
{
	//настройка пределителя тактовой частоты контроллера
	CLKPR = 128;
  34:	80 e8       	ldi	r24, 0x80	; 128
  36:	86 bd       	out	0x26, r24	; 38
	CLKPR = 4;
  38:	84 e0       	ldi	r24, 0x04	; 4
  3a:	86 bd       	out	0x26, r24	; 38
	//настройка всех портов на выход
	DDRA = 0b11111111;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
  40:	87 bb       	out	0x17, r24	; 23
	//настройка таймера
	TCCR0A = 0b11000011;
  42:	83 ec       	ldi	r24, 0xC3	; 195
  44:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0b00000010;
  46:	82 e0       	ldi	r24, 0x02	; 2
  48:	83 bf       	out	0x33, r24	; 51
	//настройка точки сравнения скважности
	OCR0A = 225;
  4a:	81 ee       	ldi	r24, 0xE1	; 225
  4c:	86 bf       	out	0x36, r24	; 54
	//Сравнение с просто свечением
	PORTA = 0b00000001;
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	8b bb       	out	0x1b, r24	; 27
  52:	09 c0       	rjmp	.+18     	; 0x66 <__SREG__+0x27>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	83 ec       	ldi	r24, 0xC3	; 195
  56:	99 e0       	ldi	r25, 0x09	; 9
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <__SREG__+0x19>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <__SREG__+0x1f>
  5e:	00 00       	nop
	//изменение точки скважности
	while (1)
	{
		for (;OCR0A<255;OCR0A++)
  60:	86 b7       	in	r24, 0x36	; 54
  62:	8f 5f       	subi	r24, 0xFF	; 255
  64:	86 bf       	out	0x36, r24	; 54
  66:	86 b7       	in	r24, 0x36	; 54
  68:	8f 3f       	cpi	r24, 0xFF	; 255
  6a:	a1 f7       	brne	.-24     	; 0x54 <__SREG__+0x15>
  6c:	09 c0       	rjmp	.+18     	; 0x80 <__SREG__+0x41>
  6e:	81 ee       	ldi	r24, 0xE1	; 225
  70:	94 e0       	ldi	r25, 0x04	; 4
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
  76:	00 c0       	rjmp	.+0      	; 0x78 <__SREG__+0x39>
  78:	00 00       	nop
		{
			_delay_ms(10);
		}
		for (;OCR0A>0;OCR0A--)
  7a:	86 b7       	in	r24, 0x36	; 54
  7c:	81 50       	subi	r24, 0x01	; 1
  7e:	86 bf       	out	0x36, r24	; 54
  80:	86 b7       	in	r24, 0x36	; 54
  82:	81 11       	cpse	r24, r1
  84:	f4 cf       	rjmp	.-24     	; 0x6e <__SREG__+0x2f>
  86:	ef cf       	rjmp	.-34     	; 0x66 <__SREG__+0x27>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
